{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  })[\"catch\"](function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })[\"catch\"](function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/nicoladimarco/Desktop/Code/conversational-dDAI/conversational-dDAI/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","concat","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  })[\"catch\"](function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })[\"catch\"](function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}