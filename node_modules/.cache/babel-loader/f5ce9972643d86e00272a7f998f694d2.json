{"ast":null,"code":"export { default as storage, getCookie, setCookie, removeCookie } from '@analytics/storage-utils';\n\nfunction decode(s) {\n  try {\n    return decodeURIComponent(s.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\nvar inBrowser = typeof window !== 'undefined';\n\nfunction getBrowserLocale() {\n  if (!inBrowser) return null;\n  var _navigator = navigator,\n      language = _navigator.language,\n      languages = _navigator.languages,\n      userLanguage = _navigator.userLanguage;\n\n  if (languages && languages.length) {\n    // latest versions of Chrome and Firefox set this correctly\n    return languages[0];\n  } // IE only\n\n\n  if (userLanguage) {\n    return userLanguage;\n  } // latest versions of Chrome, Firefox, and Safari set this correctly\n\n\n  return language;\n}\n\nfunction getTimeZone() {\n  if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat !== 'function' || typeof Intl.DateTimeFormat().resolvedOptions !== 'function') {\n    return null;\n  }\n\n  return Intl.DateTimeFormat().resolvedOptions().timeZone;\n}\n/* alt approach\ntry {\n  return Intl.DateTimeFormat().resolvedOptions().timeZone\n} catch (error) {\n  // nothing\n}\n*/\n\n\nfunction isExternalReferrer(ref) {\n  if (!inBrowser) return false;\n  var referrer = ref || document.referrer;\n\n  if (referrer) {\n    var port = window.document.location.port;\n    var _ref = referrer.split('/')[2];\n\n    if (port) {\n      _ref = _ref.replace(\":\".concat(port), '');\n    }\n\n    return _ref !== window.location.hostname;\n  }\n\n  return false;\n}\n/**\n * Check if a script is loaded\n * @param  {String|RegExp} script - Script src as string or regex\n * @return {Boolean} is script loaded\n */\n\n\nfunction isScriptLoaded(script) {\n  if (!inBrowser) return true;\n  var scripts = document.getElementsByTagName('script');\n  return !!Object.keys(scripts).filter(function (key) {\n    var src = scripts[key].src;\n\n    if (typeof script === 'string') {\n      return src.indexOf(script) !== -1;\n    } else if (script instanceof RegExp) {\n      return src.match(script);\n    }\n\n    return false;\n  }).length;\n}\n\nfunction noOp() {}\n\nfunction paramsClean(url, param) {\n  var search = (url.split('?') || [,])[1]; // eslint-disable-line\n\n  if (!search || search.indexOf(param) === -1) {\n    return url;\n  } // remove all utm params from URL search\n\n\n  var regex = new RegExp(\"(\\\\&|\\\\?)\".concat(param, \"([_A-Za-z0-9\\\"+=.\\\\/\\\\-@%]+)\"), 'g');\n  var cleanSearch = \"?\".concat(search).replace(regex, '').replace(/^&/, '?'); // replace search params with clean params\n\n  var cleanURL = url.replace(\"?\".concat(search), cleanSearch); // use browser history API to clean the params\n\n  return cleanURL;\n}\n/**\n * Get a given query parameter value\n * @param  {string} param - Key of parameter to find\n * @param  {string} url - url to search\n * @return {string} match\n */\n\n\nfunction getValueParamValue(param, url) {\n  return decode((RegExp(\"\".concat(param, \"=(.+?)(&|$)\")).exec(url) || [, ''])[1]);\n}\n/**\n * Get search string from given url\n * @param  {string} [url] - optional url string. If no url, window.location.search will be used\n * @return {string} url search string\n */\n\n\nfunction getSearchString(url) {\n  if (url) {\n    var p = url.match(/\\?(.*)/);\n    return p && p[1] ? p[1].split('#')[0] : '';\n  }\n\n  return inBrowser && window.location.search.substring(1);\n}\n/**\n * Parse url parameters into javascript object\n * @param  {string} [url] - URI to parse. If no url supplied window.location will be used\n * @return {object} parsed url parameters\n */\n\n\nfunction paramsParse(url) {\n  var searchString = getSearchString(url);\n  return searchString ? getParamsAsObject(searchString) : {};\n}\n/*\n?first=abc&a[]=123&a[]=false&b[]=str&c[]=3.5&a[]=last\nhttps://random.url.com?Target=Report&Method=getStats&fields%5B%5D=Offer.name&fields%5B%5D=Advertiser.company&fields%5B%5D=Stat.clicks&fields%5B%5D=Stat.conversions&fields%5B%5D=Stat.cpa&fields%5B%5D=Stat.payout&fields%5B%5D=Stat.date&fields%5B%5D=Stat.offer_id&fields%5B%5D=Affiliate.company&groups%5B%5D=Stat.offer_id&groups%5B%5D=Stat.date&filters%5BStat.affiliate_id%5D%5Bconditional%5D=EQUAL_TO&filters%5BStat.affiliate_id%5D%5Bvalues%5D=1831&limit=9999\nhttps://random.url.com?Target=Offer&Method=findAll&filters%5Bhas_goals_enabled%5D%5BTRUE%5D=1&filters%5Bstatus%5D=active&fields%5B%5D=id&fields%5B%5D=name&fields%5B%5D=default_goal_name\nhttp://localhost:3000/?Target=Offer&Method=findAll&filters[has_goals_enabled][TRUE]=1&filters[status]=active&filters[wow]arr[]=yaz&filters[wow]arr[]=naz&fields[]=id&fields[]=name&fields[]=default_goal_name */\n\n\nfunction getParamsAsObject(query) {\n  var re = /([^&=]+)=?([^&]*)/g;\n  var params = {};\n  var e;\n\n  while (e = re.exec(query)) {\n    // eslint-disable-line\n    var k = decode(e[1]);\n    var v = decode(e[2]);\n\n    if (k.substring(k.length - 2) === '[]') {\n      k = k.substring(0, k.length - 2);\n      (params[k] || (params[k] = [])).push(v);\n    } else {\n      var val = v === '' ? true : v;\n      params[k] = val;\n    }\n  }\n\n  for (var prop in params) {\n    var structure = prop.split('[');\n\n    if (structure.length > 1) {\n      var levels = [];\n      structure.forEach(function (item, i) {\n        // eslint-disable-line\n        var key = item.replace(/[?[\\]\\\\ ]/g, '');\n        levels.push(key);\n      });\n      assign(params, levels, params[prop]);\n      delete params[prop];\n    }\n  }\n\n  return params;\n}\n\nfunction assign(obj, keyPath, value) {\n  var lastKeyIndex = keyPath.length - 1;\n\n  for (var i = 0; i < lastKeyIndex; ++i) {\n    var key = keyPath[i];\n\n    if (!(key in obj)) {\n      obj[key] = {};\n    }\n\n    obj = obj[key];\n  }\n\n  obj[keyPath[lastKeyIndex]] = value;\n}\n/**\n * Removes params from url in browser\n * @param  {string}   param       - param key to remove from current URL\n * @param  {function} [callback]  - callback function to run. Only runs in browser\n * @return {promise}\n */\n\n\nfunction paramsRemove(param, callback) {\n  if (!inBrowser) return Promise.resolve();\n  return new Promise(function (resolve, reject) {\n    if (window.history && window.history.replaceState) {\n      var url = window.location.href;\n      var cleanUrl = paramsClean(url, param);\n\n      if (url !== cleanUrl) {\n        /* replace URL with history API */\n        // eslint-disable-next-line no-restricted-globals\n        history.replaceState({}, '', cleanUrl);\n      }\n    }\n\n    if (callback) callback();\n    return resolve();\n  });\n}\n/**\n * Get host domain of url\n * @param  {String} url - href of page\n * @return {String} hostname of page\n *\n * @example\n *  getDomainHost('https://subdomain.my-site.com/')\n *  > subdomain.my-site.com\n */\n\n\nfunction getDomainHost(url) {\n  if (!inBrowser) return null;\n  var a = document.createElement('a');\n  a.setAttribute('href', url);\n  return a.hostname;\n}\n/**\n * Get host domain of url\n * @param  {String} url - href of page\n * @return {String} base hostname of page\n *\n * @example\n *  getDomainBase('https://subdomain.my-site.com/')\n *  > my-site.com\n */\n\n\nfunction getDomainBase(url) {\n  var host = getDomainHost(url) || '';\n  return host.split('.').slice(-2).join('.');\n}\n/**\n * Remove TLD from domain string\n * @param  {String} baseDomain - host name of site\n * @return {String}\n * @example\n *  trimTld('google.com')\n *  > google\n */\n\n\nfunction trimTld(baseDomain) {\n  var arr = baseDomain.split('.');\n  return arr.length > 1 ? arr.slice(0, -1).join('.') : baseDomain;\n}\n\nvar url = {\n  trimTld: trimTld,\n  getDomainBase: getDomainBase,\n  getDomainHost: getDomainHost\n};\nvar googleKey = 'google';\n/**\n * Checks a given url and parses referrer data\n * @param  {String} [referrer] - (optional) referring URL\n * @param  {String} [currentUrl] - (optional) the current url\n * @return {Object}     [description]\n */\n\nfunction parseReferrer(referrer, currentUrl) {\n  if (!inBrowser) return false; // default referral data\n\n  var refData = {\n    'source': '(direct)',\n    'medium': '(none)',\n    'campaign': '(not set)' // Add raw ref url if external\n\n  };\n\n  if (referrer && isExternalReferrer(referrer)) {\n    refData.referrer = referrer;\n  }\n\n  var domainInfo = parseDomain(referrer); // Read referrer URI and infer source\n\n  if (domainInfo && Object.keys(domainInfo).length) {\n    refData = Object.assign({}, refData, domainInfo);\n  } // Read URI params and use set utm params\n\n\n  var params = paramsParse(currentUrl);\n  var paramKeys = Object.keys(params);\n\n  if (paramKeys.length) {\n    // set campaign params off matches\n    var gaParams = paramKeys.reduce(function (acc, key) {\n      // match utm params & dclid (display) & gclid (cpc)\n      if (key.match(/^utm_/)) {\n        acc[\"\".concat(key.replace(/^utm_/, ''))] = params[key];\n      } // https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters\n      // dclid - cpc Cost-Per-Thousand Impressions\n      // gclid - cpc Cost per Click\n\n\n      if (key.match(/^(d|g)clid/)) {\n        acc['source'] = googleKey;\n        acc['medium'] = params.gclid ? 'cpc' : 'cpm';\n        acc[key] = params[key];\n      }\n\n      return acc;\n    }, {});\n    refData = Object.assign({}, refData, gaParams);\n\n    if (params.dclid || params.gclid) {\n      refData['source'] = googleKey;\n      refData['medium'] = params.gclid ? 'cpc' : 'cpm';\n    }\n  }\n\n  return refData;\n}\n/**\n * Client side domain parser for determining marketing data.\n * @param  {String} referrer - ref url\n * @return {Object}\n */\n\n\nfunction parseDomain(referrer) {\n  if (!referrer || !inBrowser) return false;\n  var referringDomain = getDomainBase(referrer);\n  var a = document.createElement('a');\n  a.href = referrer; // Shim for the billion google search engines\n\n  if (a.hostname.indexOf(googleKey) > -1) {\n    referringDomain = googleKey;\n  } // If is search engine\n\n\n  if (searchEngines[referringDomain]) {\n    var searchEngine = searchEngines[referringDomain];\n    var queryParam = typeof searchEngine === 'string' ? searchEngine : searchEngine.p;\n    var termRegex = new RegExp(queryParam + '=.*?([^&#]*|$)', 'gi');\n    var term = a.search.match(termRegex);\n    return {\n      source: searchEngine.n || trimTld(referringDomain),\n      medium: 'organic',\n      term: (term ? term[0].split('=')[1] : '') || '(not provided)'\n    };\n  } // Default\n\n\n  var medium = !isExternalReferrer(referrer) ? 'internal' : 'referral';\n  return {\n    source: a.hostname,\n    medium: medium\n  };\n}\n/**\n * Search engine query string data\n * @type {Object}\n */\n\n\nvar Q = 'q';\nvar QUERY = 'query';\nvar searchEngines = {\n  'daum.net': Q,\n  'eniro.se': 'search_word',\n  'naver.com': QUERY,\n  'yahoo.com': 'p',\n  'msn.com': Q,\n  'aol.com': Q,\n  'lycos.com': Q,\n  'ask.com': Q,\n  'cnn.com': QUERY,\n  'about.com': 'terms',\n  'baidu.com': 'wd',\n  'yandex.com': 'text',\n  'seznam.cz': Q,\n  'search.com': Q,\n  'yam.com': 'k',\n  'kvasir.no': Q,\n  'terra.com': QUERY,\n  'mynet.com': Q,\n  'rambler.ru': 'words',\n  'google': Q,\n  'bing.com': {\n    'p': Q,\n    'n': 'live'\n  }\n};\n\nfunction uuid() {\n  var lut = [];\n\n  for (var i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n\n  return function () {\n    var d0 = genNumber();\n    var d1 = genNumber();\n    var d2 = genNumber();\n    var d3 = genNumber();\n    /* eslint-disable */\n\n    return \"\".concat(lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff], \"-\").concat(lut[d1 & 0xff]).concat(lut[d1 >> 8 & 0xff], \"-\").concat(lut[d1 >> 16 & 0x0f | 0x40]).concat(lut[d1 >> 24 & 0xff], \"-\").concat(lut[d2 & 0x3f | 0x80]).concat(lut[d2 >> 8 & 0xff], \"-\").concat(lut[d2 >> 16 & 0xff]).concat(lut[d2 >> 24 & 0xff]).concat(lut[d3 & 0xff]).concat(lut[d3 >> 8 & 0xff]).concat(lut[d3 >> 16 & 0xff]).concat(lut[d3 >> 24 & 0xff]);\n    /* eslint-enable */\n  }();\n}\n\nfunction genNumber() {\n  return Math.random() * 0xffffffff | 0;\n} // const context = (typeof self === 'object' && self.self === self && self) || // eslint-disable-line\n//   (typeof global === 'object' && global.global === global && global) ||\n//   this\n//\n// export default context\n\n/* global self globalThis */\n\n\nvar getGlobal = function getGlobal() {\n  /* eslint-disable */\n  if (typeof self !== 'undefined' && self) {\n    return self;\n  }\n  /* eslint-enable */\n\n\n  if (typeof window !== 'undefined' && window) {\n    return window;\n  }\n\n  if (typeof global !== 'undefined' && global) {\n    return global;\n  }\n\n  if (typeof globalThis !== 'undefined' && globalThis) {\n    return globalThis;\n  }\n};\n\nvar globalContext = getGlobal();\nexport { decode as decodeUri, getBrowserLocale, getTimeZone, inBrowser, isExternalReferrer, isScriptLoaded, noOp, paramsClean, getValueParamValue as paramsGet, paramsParse, paramsRemove, parseReferrer, url, uuid, globalContext };","map":null,"metadata":{},"sourceType":"module"}