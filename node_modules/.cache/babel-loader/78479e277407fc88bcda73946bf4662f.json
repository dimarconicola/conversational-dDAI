{"ast":null,"code":"import { hasCookieSupport, getCookie, setCookie, removeCookie } from '@analytics/cookie-utils';\nexport { getCookie, setCookie, removeCookie, hasCookieSupport } from '@analytics/cookie-utils';\n\nfunction hasLocalStorage() {\n  try {\n    if (typeof localStorage === 'undefined' || typeof JSON === 'undefined') {\n      return false;\n    } // test for safari private\n\n\n    localStorage.setItem('__test', '1');\n    localStorage.removeItem('__test');\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction parse(input) {\n  var value;\n\n  try {\n    value = JSON.parse(input);\n\n    if (typeof value === 'undefined') {\n      value = input;\n    }\n\n    if (value === 'true') {\n      value = true;\n    }\n\n    if (value === 'false') {\n      value = false;\n    }\n\n    if (parseFloat(value) === value && _typeof(value) !== 'object') {\n      value = parseFloat(value);\n    }\n  } catch (e) {\n    value = input;\n  }\n\n  return value;\n}\n/* global self globalThis */\n\n\nfunction getGlobalThis() {\n  if (typeof globalThis !== 'undefined') return globalThis;\n  if (typeof global !== 'undefined') return global;\n  if (typeof self !== 'undefined') return self;\n  /* eslint-disable-line no-restricted-globals */\n\n  if (typeof window !== 'undefined') return window;\n  if (typeof this !== 'undefined') return this;\n  return {}; // should never happen\n}\n/* tinier from https://github.com/purposeindustries/window-or-global/blob/master/lib/index.js\nconst context = (typeof self === 'object' && self.self === self && self) || // eslint-disable-line\n  (typeof global === 'object' && global.global === global && global) ||\n  this\nexport default context\n*/\n\n\nvar LOCAL_STORAGE = 'localStorage';\nvar COOKIE = 'cookie';\nvar GLOBAL = 'global'; // Verify support\n\nvar hasStorage = hasLocalStorage();\nvar hasCookies = hasCookieSupport();\n/**\n * Get storage item from localStorage, cookie, or window\n * @param  {string} key - key of item to get\n * @param  {object|string} [options] - storage options. If string location of where to get storage\n * @param  {string} [options.storage] - Define type of storage to pull from.\n * @return {Any}  the value of key\n */\n\nfunction getItem(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!key) return null;\n  var storageType = getStorageType(options); // Get value from all locations\n\n  if (storageType === 'all') return getAll(key);\n  /* 1. Try localStorage */\n\n  if (useLocal(storageType)) {\n    var value = localStorage.getItem(key);\n    if (value || storageType === LOCAL_STORAGE) return parse(value);\n  }\n  /* 2. Fallback to cookie */\n\n\n  if (useCookie(storageType)) {\n    var _value = getCookie(key);\n\n    if (_value || storageType === COOKIE) return parse(_value);\n  }\n  /* 3. Fallback to window/global. */\n\n\n  return getGlobalThis[key] || null;\n}\n\nfunction getAll(key) {\n  return {\n    cookie: parse(getCookie(key)),\n    localStorage: parse(localStorage.getItem(key)),\n    global: getGlobalThis[key] || null\n  };\n}\n/**\n * Store values in localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {*} value - value of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n * @returns {object} returns old value, new values, & location of storage\n */\n\n\nfunction setItem(key, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!key || !value) return false;\n  var storageType = getStorageType(options);\n  var saveValue = JSON.stringify(value);\n  /* 1. Try localStorage */\n\n  if (useLocal(storageType)) {\n    // console.log('SET as localstorage', saveValue)\n    var _oldValue = parse(localStorage.getItem(key));\n\n    localStorage.setItem(key, saveValue);\n    return {\n      value: value,\n      oldValue: _oldValue,\n      location: LOCAL_STORAGE\n    };\n  }\n  /* 2. Fallback to cookie */\n\n\n  if (useCookie(storageType)) {\n    // console.log('SET as cookie', saveValue)\n    var _oldValue2 = parse(getCookie(key));\n\n    setCookie(key, saveValue);\n    return {\n      value: value,\n      oldValue: _oldValue2,\n      location: COOKIE\n    };\n  }\n  /* 3. Fallback to window/global */\n\n\n  var oldValue = getGlobalThis[key];\n  getGlobalThis[key] = value;\n  return {\n    value: value,\n    oldValue: oldValue,\n    location: GLOBAL\n  };\n}\n/**\n * Remove values from localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n */\n\n\nfunction removeItem(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!key) return false;\n  var storageType = getStorageType(options);\n\n  if (useLocal(storageType)) {\n    /* 1. Try localStorage */\n    localStorage.removeItem(key);\n    return LOCAL_STORAGE;\n  } else if (useCookie(storageType)) {\n    /* 2. Fallback to cookie */\n    removeCookie(key);\n    return COOKIE;\n  }\n  /* 3. Fallback to window/global */\n\n\n  getGlobalThis[key] = null;\n  return GLOBAL;\n}\n\nfunction getStorageType(options) {\n  return typeof options === 'string' ? options : options.storage;\n}\n\nfunction useLocal(storage) {\n  return hasStorage && (!storage || storage === LOCAL_STORAGE);\n}\n\nfunction useCookie(storage) {\n  return hasCookies && (!storage || storage === COOKIE);\n}\n\nvar index = {\n  getItem: getItem,\n  setItem: setItem,\n  removeItem: removeItem\n};\nexport default index;\nexport { getItem, setItem, removeItem, hasLocalStorage as hasLocalStorageSupport };","map":null,"metadata":{},"sourceType":"module"}