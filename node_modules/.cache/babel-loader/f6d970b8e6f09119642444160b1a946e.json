{"ast":null,"code":"import _slicedToArray from \"/Users/nicoladimarco/Desktop/Code/conversational-dDAI/conversational-dDAI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nicoladimarco/Desktop/Code/conversational-dDAI/conversational-dDAI/src/components/ContactForm.js\";\nimport React, { useState } from \"react\";\nimport FormStatus from \"./FormStatus\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\n\nfunction ContactForm(props) {\n  // State for input values\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        email = _useState4[0],\n        setEmail = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        message = _useState6[0],\n        setMessage = _useState6[1]; // Whether to show errors\n  // We set to true if they submit and there are errors.\n  // We only show errors after they submit because\n  // it's annoying to see errors while typing.\n\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        showErrors = _useState8[0],\n        setShowErrors = _useState8[1]; // Error array we'll populate\n\n\n  let errors = []; // Function for fetching error for a field\n\n  const getError = field => {\n    return errors.find(e => e.field === field);\n  }; // Function to see if field is empty\n\n\n  const isEmpty = val => val.trim() === \"\"; // Add error if email empty\n\n\n  if (isEmpty(email)) {\n    errors.push({\n      field: \"email\",\n      message: \"Please enter an email\"\n    });\n  } // Add error if message empty\n\n\n  if (isEmpty(message)) {\n    errors.push({\n      field: \"message\",\n      message: \"Please enter a message\"\n    });\n  } // Add error if name shown and empty\n\n\n  if (props.showNameField) {\n    if (isEmpty(name)) {\n      errors.push({\n        field: \"name\",\n        message: \"Please enter your name\"\n      });\n    }\n  } // Handle form submission\n\n\n  const handleSubmit = e => {\n    // If field errors then show them\n    if (errors.length) {\n      setShowErrors(true);\n    } else {\n      // Otherwise call onSubmit with form data\n      if (props.onSubmit) {\n        props.onSubmit({\n          name,\n          email,\n          message\n        });\n      }\n    }\n  };\n\n  return React.createElement(React.Fragment, null, props.status && props.status.message && React.createElement(FormStatus, {\n    type: props.status.type,\n    message: props.status.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field is-horizontal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, props.showNameField && React.createElement(FormField, {\n    value: name,\n    type: \"text\",\n    placeholder: \"Name\",\n    error: showErrors && getError(\"name\"),\n    onChange: value => setName(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(FormField, {\n    value: email,\n    type: \"email\",\n    placeholder: \"Email\",\n    error: showErrors && getError(\"email\"),\n    onChange: value => setEmail(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"field is-horizontal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(FormField, {\n    value: message,\n    type: \"textarea\",\n    placeholder: \"Message\",\n    error: showErrors && getError(\"message\"),\n    onChange: value => setMessage(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"field is-horizontal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(SectionButton, {\n    parentColor: props.parentColor,\n    size: \"medium\",\n    state: props.status && props.status.type === \"pending\" ? \"loading\" : \"normal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, props.buttonText)))))));\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/nicoladimarco/Desktop/Code/conversational-dDAI/conversational-dDAI/src/components/ContactForm.js"],"names":["React","useState","FormStatus","FormField","SectionButton","ContactForm","props","name","setName","email","setEmail","message","setMessage","showErrors","setShowErrors","errors","getError","field","find","e","isEmpty","val","trim","push","showNameField","handleSubmit","length","onSubmit","status","type","preventDefault","value","parentColor","buttonText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport FormStatus from \"./FormStatus\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\n\nfunction ContactForm(props) {\n  // State for input values\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  // Whether to show errors\n  // We set to true if they submit and there are errors.\n  // We only show errors after they submit because\n  // it's annoying to see errors while typing.\n  const [showErrors, setShowErrors] = useState(false);\n\n  // Error array we'll populate\n  let errors = [];\n\n  // Function for fetching error for a field\n  const getError = field => {\n    return errors.find(e => e.field === field);\n  };\n\n  // Function to see if field is empty\n  const isEmpty = val => val.trim() === \"\";\n\n  // Add error if email empty\n  if (isEmpty(email)) {\n    errors.push({\n      field: \"email\",\n      message: \"Please enter an email\"\n    });\n  }\n\n  // Add error if message empty\n  if (isEmpty(message)) {\n    errors.push({\n      field: \"message\",\n      message: \"Please enter a message\"\n    });\n  }\n\n  // Add error if name shown and empty\n  if (props.showNameField) {\n    if (isEmpty(name)) {\n      errors.push({\n        field: \"name\",\n        message: \"Please enter your name\"\n      });\n    }\n  }\n\n  // Handle form submission\n  const handleSubmit = e => {\n    // If field errors then show them\n    if (errors.length) {\n      setShowErrors(true);\n    } else {\n      // Otherwise call onSubmit with form data\n      if (props.onSubmit) {\n        props.onSubmit({\n          name,\n          email,\n          message\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      {props.status && props.status.message && (\n        <FormStatus type={props.status.type} message={props.status.message} />\n      )}\n\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          handleSubmit();\n        }}\n      >\n        <div className=\"field is-horizontal\">\n          <div className=\"field-body\">\n            {props.showNameField && (\n              <FormField\n                value={name}\n                type=\"text\"\n                placeholder=\"Name\"\n                error={showErrors && getError(\"name\")}\n                onChange={value => setName(value)}\n              />\n            )}\n\n            <FormField\n              value={email}\n              type=\"email\"\n              placeholder=\"Email\"\n              error={showErrors && getError(\"email\")}\n              onChange={value => setEmail(value)}\n            />\n          </div>\n        </div>\n        <div className=\"field is-horizontal\">\n          <div className=\"field-body\">\n            <FormField\n              value={message}\n              type=\"textarea\"\n              placeholder=\"Message\"\n              error={showErrors && getError(\"message\")}\n              onChange={value => setMessage(value)}\n            />\n          </div>\n        </div>\n        <div className=\"field is-horizontal\">\n          <div className=\"field-body\">\n            <div className=\"field\">\n              <div className=\"control\">\n                <SectionButton\n                  parentColor={props.parentColor}\n                  size=\"medium\"\n                  state={\n                    props.status && props.status.type === \"pending\"\n                      ? \"loading\"\n                      : \"normal\"\n                  }\n                >\n                  {props.buttonText}\n                </SectionButton>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}